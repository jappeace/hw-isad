/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package isad.w6.practicum.graphical;

import isad.w6.practicum.o1.Node;
import isad.w6.practicum.o1.Tree;
import java.awt.Color;
import java.awt.Graphics;
import java.util.List;

/**
 *
 * @author jappie
 */
public class TreePainter extends javax.swing.JPanel {

	private Tree _tree;
	private static final int circleRadius = 25;
	private static final double xFactor = 3.5, yFactor = 2.5;
	private boolean _mirrord =false;
	/**
	 * Creates new form TreePainter
	 */
	public TreePainter() {
		initComponents();
		// tabbed to make a rough assesment of the tree, for debuging reasons
		Node<String> root = new Node<String>("F", new Node<String>("A", new Node<String>("B", new Node<String>("4"), new Node<String>("O"))), 
								new Node<String>("D", 
							new Node<String>("I"), new Node<String>("C", 
							new Node<String>("G", null, new Node<String>("A")),
				
																	new Node<String>("B", 
														new Node<String>("A")))));
		_tree = new Tree<String>(root);
	}
	@Override
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		List<Node<String>> l = getTree().getNodes();
		
		for(Node<String> node : l){
			int x = calcX(node), 
				y = calcY(node);
			
			
			if(node.hasLft()){
				drawLine(g, x, y, (Node<String>)node.getLft());
			}
			if(node.hasRght()){
				drawLine(g, x, y, (Node<String>)node.getRght());				
			}
			
			g.setColor(Color.black);
			g.fillOval(x, y, circleRadius*2, circleRadius*2);
			g.setColor(Color.white);
			g.drawString(node.getData().toString(), x+circleRadius, y+circleRadius);
		}
		
	}
	private void drawLine(Graphics g, int x, int y, Node<String> to){
		g.setColor(Color.red);
		g.drawLine(x+circleRadius, y+circleRadius, calcX(to)+circleRadius, calcY(to)+circleRadius);
		g.drawLine(x+circleRadius, y+circleRadius+1, calcX(to)+circleRadius, calcY(to)+circleRadius+1);	
		g.drawLine(x+circleRadius+1, y+circleRadius, calcX(to)+circleRadius+1, calcY(to)+circleRadius);	
	}
	private int calcX(Node<String> node){
		return  (int) ((int) node.getX()*circleRadius*xFactor);
	}
	private int calcY(Node<String> node){
		return (int)(isMirrord() ?
				getTree().height()*circleRadius*yFactor-node.getY()*circleRadius*yFactor 
					: node.getY()*circleRadius*yFactor);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

	/**
	 * @return the _tree
	 */
	private Tree getTree() {
		return _tree;
	}

	/**
	 * @param tree the _tree to set
	 */
	private void setTree(Tree tree) {
		this._tree = tree;
	}

	/**
	 * @return the _mirrord
	 */
	public boolean isMirrord() {
		return _mirrord;
	}

	/**
	 * @param mirrord the _mirrord to set
	 */
	public void setMirrord(boolean mirrord) {
		this._mirrord = mirrord;
	}
}
